"""Several functions used in the app"""
import pandas as pd
from io import BytesIO
import streamlit as st

from src.models.training import get_model_configs


def manage_sidebar(df: pd.DataFrame, SEED):
    all_features = df.drop(columns=["Response"]).columns.tolist()

    selected_features = st.sidebar.multiselect(
        "Select features to include", all_features, default=all_features
        )

    models_params = get_model_configs()
    model_type = st.sidebar.selectbox("Select Model Type", list(models_params.keys()))
    selected_model_info = models_params[model_type]

    model_kwargs = {}
    for param in selected_model_info["params"]:
        if param["type"] == "slider":
            value = st.sidebar.slider(param["name"], param["min"], param["max"], param["default"])
            model_kwargs[param["name"]] = value

    model = selected_model_info["model"](**model_kwargs, random_state=SEED)
    test_size = st.sidebar.slider("Test Size (Proportion)", 0.01, 0.99, 0.20)
    method = st.sidebar.radio(
        "Resampling Method",
        options=[None, "SMOTE", "OVER"],
        help="Resampling method to apply to the training dataset. Default: None"
        )
    return selected_features, model_type, model, model_kwargs, test_size, method


@st.cache_data
def to_excel(classif, metrics, model_info):
    """
    Converts classification results and model parameters into an Excel file.

    Parameters:
    - classif (DataFrame): A pandas DataFrame containing the classification results.
    - model_info (DataFrame): A pandas DataFrame containing information about the model.

    Returns:
    - BytesIO: A buffer containing the Excel file.

    Decorators:
    - @st.cache_data: Caches the output of this function to avoid regenerating the Excel
      file from the same DataFrames multiple times.
    """
    buffer = BytesIO()
    with pd.ExcelWriter(buffer, engine='xlsxwriter') as writer:
        classif.to_excel(writer, sheet_name='Classification Report', index=True)
        metrics.to_excel(writer, sheet_name='Metrics', index=True)
        model_info.to_excel(writer, sheet_name='Params', index=True)
    return buffer


def download_results(results):
    """
    Creates a download button for users to download classification results.

    Parameters:
    - results (BytesIO or similar): The data to be downloaded, typically generated by
      the 'to_excel' function.

    Returns:
    - Streamlit Download Button: A download button rendered by Streamlit, allowing the
      user to download the provided data as an XLSX file.
    """
    return st.download_button(
        label="ðŸ“¥ Download classification report as XLSX",
        data=results,
        file_name='results.csv'
    )


def get_model_info(model_type, model_kwargs, SEED):
    """
    Creates a DataFrame containing information about a model.

    Parameters:
    - model_type (str): The type of the model (e.g., 'RandomForest').
    - model_kwargs (dict): A dictionary of the model's initialization parameters.
    - SEED (int): The seed used for random number generation in the model.

    Returns:
    - DataFrame: A pandas DataFrame with a single row containing the model's information.
    """
    return pd.DataFrame({
        "Model": [model_type],
        **{k: [v] for k, v in model_kwargs.items()},
        "Seed": [SEED]
    }, index=[0])
